generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Seller {
  id        String     @id @default(uuid())
  name      String     @unique
  products  Product[]
  ShopFront ShopFront?
  user      User?      @relation(fields: [userId], references: [id])
  userId    String     @unique
  isDeleted Boolean    @default(false)

  @@map("sellers")
}

model User {
  id                  String          @id @default(uuid())
  firstName           String
  lastName            String
  phoneNumber         String?
  emailAddress        String?
  pfpLink             String?
  ratings             Rating[]
  questions           Question[]
  answers             Answer[]
  orders              Order[]
  reviewsFoundHelpful Review[]
  addresses           Address[]
  sellerAccount       Seller?
  shoppingCart        CartItem[]
  questionVotes       QuestionVotes[]
  answerVotes         AnswerVotes[]
  isDeleted           Boolean         @default(false)

  @@map("users")
}

model ShopFront {
  id               String          @id @default(uuid())
  seller           Seller          @relation(fields: [sellerId], references: [id])
  sellerId         String          @unique
  bannerLink       String?
  pfpLink          String?
  selectMenus      Json
  socialMediaLinks Json?
  pages            ShopFrontPage[]
  isDeleted        Boolean         @default(false)

  @@map("shopFronts")
}

model ShopFrontPage {
  id          String       @id @default(uuid())
  shopFront   ShopFront?   @relation(fields: [shopFrontId], references: [id])
  shopFrontId String
  type        ShopPageType
  entities    ShopEntity[]
  isDeleted   Boolean      @default(false)

  @@map("shopFrontsPages")
}

enum ShopPageType {
  HOME
  NORMAL
}

enum MediaType {
  IMAGE
  VIDEO
  GIF
}

enum ShopEntitySize {
  MAIN
  XL
  L
  MD
  SM
}

model ShopEntity {
  id              String         @id @default(uuid())
  shopFrontPage   ShopFrontPage  @relation(fields: [shopFrontPageId], references: [id])
  shopFrontPageId String
  type            MediaType
  mediaLink       String
  link            String
  size            ShopEntitySize
  order           Int
  isDeleted       Boolean        @default(false)

  @@map("shopEntities")
}

model ProductCategory {
  id        String    @id @default(uuid())
  name      String
  products  Product[]
  isDeleted Boolean   @default(false)

  @@map("productCategories")
}

model Product {
  id          String          @id @default(uuid())
  seller      Seller          @relation(fields: [sellerId], references: [id])
  sellerId    String
  name        String
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  properties  Json?
  description String
  media       ProductMedia[]
  dateAdded   DateTime        @default(now())
  price       Float
  ratings     Rating[]
  variantTo   Product?        @relation("ProductToProduct", fields: [variantToId], references: [id])
  variantToId String?         @unique
  product     Product?        @relation("ProductToProduct")
  questions   Question[]
  orders      Order[]
  inCarts     CartItem[]
  isDeleted   Boolean         @default(false)

  @@map("products")
}

model ProductMedia {
  id        String    @id @default(uuid())
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  link      String
  type      MediaType
  isDeleted Boolean   @default(false)

  @@map("productsMedia")
}

model CartItem {
  id        String    @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("cartItems")
}

model Rating {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  product         Product  @relation(fields: [productId], references: [id])
  productId       String
  dateAdded       DateTime @default(now())
  rating          Float
  propertyRatings Json?
  review          Review?
  isDeleted       Boolean  @default(false)

  @@unique([productId, userId])
  @@map("ratings")
}

model Review {
  id             String        @id @default(uuid())
  rating         Rating?       @relation(fields: [ratingId], references: [id])
  ratingId       String        @unique
  content        String
  foundHelpfulBy User[]
  media          ReviewMedia[]
  isDeleted      Boolean       @default(false)

  @@map("reviews")
}

model ReviewMedia {
  id        String    @id @default(uuid())
  review    Review    @relation(fields: [reviewId], references: [id])
  reviewId  String
  link      String
  type      MediaType
  isDeleted Boolean   @default(false)

  @@map("reviewsMedia")
}

model Question {
  id        String          @id @default(uuid())
  dateAdded DateTime        @default(now())
  author    User            @relation(fields: [authorId], references: [id])
  authorId  String
  product   Product         @relation(fields: [productId], references: [id])
  productId String
  votes     QuestionVotes[]
  content   String
  answers   Answer[]
  isDeleted Boolean         @default(false)

  @@map("questions")
}

model QuestionVotes {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  voter      User     @relation(fields: [voterId], references: [id])
  voterId    String
  isUpvote   Boolean
  dateAdded  DateTime @default(now())
  isDeleted  Boolean  @default(false)

  @@map("questionsVotes")
}

model Answer {
  id         String        @id @default(uuid())
  dateAdded  DateTime      @default(now())
  author     User          @relation(fields: [authorId], references: [id])
  authorId   String
  question   Question      @relation(fields: [questionId], references: [id])
  questionId String
  votes      AnswerVotes[]
  content    String
  isDeleted  Boolean       @default(false)

  @@map("answers")
}

model AnswerVotes {
  id        String   @id @default(uuid())
  answer    Answer   @relation(fields: [answerId], references: [id])
  answerId  String
  voter     User     @relation(fields: [voterId], references: [id])
  voterId   String
  isUpvote  Boolean
  dateAdded DateTime @default(now())
  isDeleted Boolean  @default(false)

  @@map("answersVotes")
}

model Address {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  addressOwner String
  dateAdded    DateTime @default(now())
  orders       Order[]
  isDeleted    Boolean

  @@map("addresses")
}

model paymentMethod {
  id        Int     @id @default(autoincrement())
  method    String
  orders    Order[]
  isDeleted Boolean @default(false)

  @@map("paymentMethods")
}

model Order {
  id              String        @id @default(uuid())
  placedBy        User          @relation(fields: [userId], references: [id])
  userId          String
  shippingAddress Address       @relation(fields: [addressId], references: [id])
  addressId       String
  datePlaced      DateTime      @default(now())
  dateArrived     DateTime?
  orderItems      Product[]
  fees            OrderFees?
  paymentMethod   paymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int
  isDeleted       Boolean       @default(false)

  @@map("orders")
}

model OrderFees {
  id               String  @id @default(uuid())
  order            Order   @relation(fields: [orderId], references: [id])
  orderId          String  @unique
  items            Float
  shipping         Float
  COD              Float   @default(0)
  VAT              Float
  promotions       Float
  returnWindowOpen Boolean @default(true)
  isDeleted        Boolean @default(false)

  @@map("ordersFees")
}

model Promotion {
  id          String   @id @default(uuid())
  code        String   @unique
  value       Float
  dateCreated DateTime @default(now())
  validUntil  DateTime
  isDeleted   Boolean  @default(false)

  @@map("promotions")
}
